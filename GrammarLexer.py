# Generated from Grammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,115,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,4,12,80,8,12,11,12,12,12,81,1,13,1,
        13,5,13,86,8,13,10,13,12,13,89,9,13,1,14,1,14,5,14,93,8,14,10,14,
        12,14,96,9,14,1,14,1,14,1,15,4,15,101,8,15,11,15,12,15,102,1,15,
        1,15,1,16,1,16,5,16,109,8,16,10,16,12,16,112,9,16,1,16,1,16,1,94,
        0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,1,0,5,1,0,48,57,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,2,0,10,10,13,13,
        119,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,40,1,0,0,0,5,42,1,0,0,0,
        7,44,1,0,0,0,9,46,1,0,0,0,11,48,1,0,0,0,13,50,1,0,0,0,15,53,1,0,
        0,0,17,58,1,0,0,0,19,65,1,0,0,0,21,69,1,0,0,0,23,72,1,0,0,0,25,79,
        1,0,0,0,27,83,1,0,0,0,29,90,1,0,0,0,31,100,1,0,0,0,33,106,1,0,0,
        0,35,36,5,99,0,0,36,37,5,97,0,0,37,38,5,115,0,0,38,39,5,101,0,0,
        39,2,1,0,0,0,40,41,5,61,0,0,41,4,1,0,0,0,42,43,5,40,0,0,43,6,1,0,
        0,0,44,45,5,44,0,0,45,8,1,0,0,0,46,47,5,41,0,0,47,10,1,0,0,0,48,
        49,5,58,0,0,49,12,1,0,0,0,50,51,5,105,0,0,51,52,5,102,0,0,52,14,
        1,0,0,0,53,54,5,116,0,0,54,55,5,104,0,0,55,56,5,101,0,0,56,57,5,
        110,0,0,57,16,1,0,0,0,58,59,5,115,0,0,59,60,5,119,0,0,60,61,5,105,
        0,0,61,62,5,116,0,0,62,63,5,99,0,0,63,64,5,104,0,0,64,18,1,0,0,0,
        65,66,5,102,0,0,66,67,5,111,0,0,67,68,5,114,0,0,68,20,1,0,0,0,69,
        70,5,105,0,0,70,71,5,110,0,0,71,22,1,0,0,0,72,73,5,114,0,0,73,74,
        5,97,0,0,74,75,5,110,0,0,75,76,5,103,0,0,76,77,5,101,0,0,77,24,1,
        0,0,0,78,80,7,0,0,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,81,
        82,1,0,0,0,82,26,1,0,0,0,83,87,7,1,0,0,84,86,7,2,0,0,85,84,1,0,0,
        0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,28,1,0,0,0,89,87,
        1,0,0,0,90,94,5,34,0,0,91,93,9,0,0,0,92,91,1,0,0,0,93,96,1,0,0,0,
        94,95,1,0,0,0,94,92,1,0,0,0,95,97,1,0,0,0,96,94,1,0,0,0,97,98,5,
        34,0,0,98,30,1,0,0,0,99,101,7,3,0,0,100,99,1,0,0,0,101,102,1,0,0,
        0,102,100,1,0,0,0,102,103,1,0,0,0,103,104,1,0,0,0,104,105,6,15,0,
        0,105,32,1,0,0,0,106,110,5,35,0,0,107,109,8,4,0,0,108,107,1,0,0,
        0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,113,1,0,0,
        0,112,110,1,0,0,0,113,114,6,16,0,0,114,34,1,0,0,0,6,0,81,87,94,102,
        110,1,6,0,0
    ]

class GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    IF = 7
    THEN = 8
    SWITCH = 9
    FOR = 10
    IN = 11
    RANGE = 12
    NUMBER = 13
    IDENTIFIER = 14
    STRING = 15
    WS = 16
    COMMENT = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'case'", "'='", "'('", "','", "')'", "':'", "'if'", "'then'", 
            "'switch'", "'for'", "'in'", "'range'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "THEN", "SWITCH", "FOR", "IN", "RANGE", "NUMBER", "IDENTIFIER", 
            "STRING", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "IF", 
                  "THEN", "SWITCH", "FOR", "IN", "RANGE", "NUMBER", "IDENTIFIER", 
                  "STRING", "WS", "COMMENT" ]

    grammarFileName = "Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


